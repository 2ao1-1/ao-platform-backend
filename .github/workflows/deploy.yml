name: Deploy AO Platform

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: docker.io
  IMAGE_NAME: 2ao11/ao-platform-backend

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: SuperStrongPassword159
          POSTGRES_USER: ao_user
          POSTGRES_DB: ao_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://ao_user:SuperStrongPassword159@localhost:5432/ao_platform

      - name: Build application
        run: npm run build

      - name: Run tests
        run: echo "Tests will be added here"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            echo "Starting deployment..."
            mkdir -p /opt/ao-platform
            cd /opt/ao-platform

            if [ -d ".git" ]; then
              echo "Pulling latest changes..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }} .
            fi

            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pulling latest Docker image..."
            docker pull ghcr.io/${{ github.repository }}:latest

            echo "Stopping old services..."
            docker-compose down || true

            echo "Starting new services..."
            docker-compose up -d

            echo "Running database migrations..."
            docker-compose exec -T app npx prisma migrate deploy || echo "Migration failed, continuing..."

            echo "Creating admin user..."
            docker-compose exec -T app npm run db:seed || echo "Admin creation failed, continuing..."

            echo "Cleaning up old images..."
            docker image prune -f

            echo "Checking service status..."
            docker-compose ps

            echo "Deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()

    steps:
      - name: Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment successful!"
          echo "Application is running at: https://your-domain.com"

      - name: Failure Notification
        if: needs.deploy.result == 'failure' || needs.build-and-push.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "Deployment failed!"
          echo "Please check the logs for more details."
