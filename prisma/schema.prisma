generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique
  password   String? // null for OAuth users
  firstName  String
  lastName   String
  avatar     String?
  bio        String?
  phone      String?
  isVerified Boolean @default(false)
  isAdmin    Boolean @default(false)
  isBanned   Boolean @default(false)

  // Social & Contact
  socialLinks Json?

  // Security
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?
  lastLoginAt      DateTime?

  // Relations
  posts     Post[]
  bids      Bid[]
  following Follow[] @relation("Follower")
  followers Follow[] @relation("Following")
  postLikes Like[]
  comment   Comment[]
  commentLikes   CommentLike[] @relation("CommentLikes")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id          String  @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  imageKey    String? // S3 key for deletion
  tagName     String?
  category    String?

  // Market
  isInMarket    Boolean   @default(false)
  startingPrice Decimal?
  reservePrice  Decimal?
  auctionEndAt  DateTime?

  // Relations
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  bids     Bid[]
  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Bid {
  id     String  @id @default(cuid())
  amount Decimal

  // Relations
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
  bidder   User   @relation(fields: [bidderId], references: [id])
  bidderId String

  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String

  createdAt   DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String? 
  
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])

  likes     CommentLike[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model CommentLike{
  id        String @id @default(cuid())
  user      User   @relation("CommentLikes",fields:[userId],references:[id])
  userId    String
  comment   Comment @relation(fields:[commentId],references:[id])
  commentId String

  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}