version: "3.8"

services:
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: ao-platform-db
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-ao_platform}
  #     POSTGRES_USER: ${POSTGRES_USER:-ao_user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SuperStrongPassword159}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - ao-network
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "pg_isready -U ${POSTGRES_USER:-ao_user} -d ${POSTGRES_DB:-ao_platform}",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  redis:
    image: redis:7-alpine
    container_name: ao-platform-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ao-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build: .
    ports:
      - "8080:5000"
    container_name: ao-platform-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRE: 15m
      JWT_REFRESH_EXPIRE: 7d
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      ALLOWED_ORIGINS: http://localhost:5000,http://localhost:5001
      FRONTEND_URL: http://localhost:5000
      ADMIN_URL: http://localhost:5001
      PORT: 5000

    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ao-network
    volumes:
      - uploads:/app/uploads
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: ao-platform-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ao-network

volumes:
  # postgres_data:
  #   driver: local
  uploads:
    driver: local

networks:
  ao-network:
    driver: bridge
